        -:    0:Source:/home/michen/riscv-em/include/cpu.h
        -:    0:Graph:./build/CMakeFiles/riscvem.dir/src/cpu.cpp.gcno
        -:    0:Data:./build/CMakeFiles/riscvem.dir/src/cpu.cpp.gcda
        -:    0:Runs:2
        -:    1:/*
        -:    2:Copyright 2025 Spalishe
        -:    3:
        -:    4:   Licensed under the Apache License, Version 2.0 (the "License");
        -:    5:   you may not use this file except in compliance with the License.
        -:    6:   You may obtain a copy of the License at
        -:    7:
        -:    8:       http://www.apache.org/licenses/LICENSE-2.0
        -:    9:
        -:   10:   Unless required by applicable law or agreed to in writing, software
        -:   11:   distributed under the License is distributed on an "AS IS" BASIS,
        -:   12:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13:   See the License for the specific language governing permissions and
        -:   14:   limitations under the License.
        -:   15:
        -:   16:*/
        -:   17:
        -:   18:#pragma once
        -:   19:
        -:   20:#include <stdint.h>
        -:   21:#include "dram.h"
        -:   22:#include "devices/mmio.h"
        -:   23:#include <string>
        -:   24:#include <functional>
        -:   25:#include <unordered_map>
        -:   26:#include <tuple>
        -:   27:
        -:   28:#include "llvm/IR/IRBuilder.h"
        -:   29:
        -:   30:#define BLOCK_EXECUTE_COUNT_TO_JIT 1000
        -:   31:
        -:   32:struct MMIO;
        -:   33:
        -:   34:struct HART;
        -:   35:
        -:   36:struct CACHE_DecodedOperands {
        -:   37:    CACHE_DecodedOperands() {}
        -:   38:    bool s = false;
        -:   39:    uint8_t rd, rs1, rs2;
        -:   40:    uint32_t imm;
        -:   41:
        -:   42:    llvm::FunctionCallee loadFunc;
        -:   43:    llvm::FunctionCallee storeFunc;
        -:   44:    llvm::FunctionCallee trapFunc;
        -:   45:    llvm::FunctionCallee printFunc;
        -:   46:
        -:   47:    llvm::FunctionCallee amo64Func;
        -:   48:    llvm::FunctionCallee amo32Func;
        -:   49:
        -:   50:    std::unordered_map<uint64_t,llvm::BasicBlock*> *branches;
        -:   51:    uint64_t jit_virtpc;
        -:   52:    
        -:   53:    std::unordered_map<uint8_t,llvm::StructType*> types;
        -:   54:
        -:   55:    bool brb = false;
        -:   56:};
        -:   57:struct CACHE_Instr {
        -:   58:    void (*fn)(HART*, uint32_t, CACHE_DecodedOperands*, std::tuple<llvm::IRBuilder<>*, llvm::Function*, llvm::Value*>*);
        -:   59:    bool incr;
        -:   60:    bool j;
        -:   61:    uint32_t inst;
        -:   62:    bool isBr;
        -:   63:    uint32_t imm_optional;
        -:   64:    CACHE_DecodedOperands oprs;
        -:   65:};
        -:   66:
        -:   67:using BlockFn = void(*)(HART*);
        -:   68:
        -:   69:struct HART {
        -:   70:    uint64_t regs[32];
        -:   71:    uint64_t pc;
        -:   72:    uint64_t virt_pc;
        -:   73:    uint64_t csrs[4069];
        -:   74:    uint8_t mode;
        -:   75:    
        -:   76:	uint64_t reservation_addr;
        -:   77:	uint64_t reservation_value;
        -:   78:	bool reservation_valid;
        -:   79:	uint8_t reservation_size;
        -:   80:
        -:   81:    bool testing;
        -:   82:    bool dbg;
        -:   83:    bool dbg_showinst = true;
        -:   84:    bool dbg_singlestep;
        -:   85:	uint64_t breakpoint;
        -:   86:	uint8_t id;
        -:   87:    
        -:   88:    bool jit_enabled = true;
        -:   89:    bool block_enabled = true;
        -:   90:
        -:   91:    std::vector<CACHE_Instr> instr_block; // instruction function, instruction itself
        -:   92:    std::unordered_map<uint64_t, std::vector<CACHE_Instr>> instr_block_cache; // as key put PC
        -:   93:    std::unordered_map<uint64_t, uint64_t> instr_block_cache_count_executed; // as key put PC
        -:   94:    std::unordered_map<uint64_t, BlockFn> instr_block_cache_jit; // as key put PC
        -:   95:    
        -:   96:	bool stopexec;
        -:   97:
        -:   98:    bool trap_active;
        -:   99:    bool trap_notify;
        -:  100:
        -:  101:    bool god_said_to_destroy_this_thread = false; // Why should you name it like this?
        -:  102:
        -:  103:    DRAM dram;
        -:  104:    MMIO* mmio;
        -:  105:
        -:  106:    void cpu_start(bool debug, uint64_t dtb_path, bool nojit);
        -:  107:    int cpu_start_testing(bool nojit);
        -:  108:    uint32_t cpu_fetch();
        -:  109:    void cpu_loop();
        -:  110:    void cpu_execute(uint32_t inst);
        -:  111:    uint64_t cpu_readfile(std::string path, uint64_t addr, bool bigendian);
        -:  112:    void print_d(const std::string& fmt, ...);
        -:  113:    void cpu_trap(uint64_t cause, uint64_t tval, bool is_interrupt);
        -:  114:
        -:  115:    uint64_t h_cpu_csr_read(uint64_t addr);
        -:  116:    void h_cpu_csr_write(uint64_t addr, uint64_t value);
        -:  117:    uint8_t h_cpu_id();
        -:  118:};
        -:  119:
        -:  120:std::string uint8_to_hex(uint8_t value);
        -:  121:
        2:  122:static uint64_t riscv_mkmisa(const char* str)
        -:  123:{
        2:  124:    uint64_t ret = 0;
        2:  125:    ret |= 0x8000000000000000ULL;
       12:  126:    while (*str && *str != '_') {
       10:  127:        if (*str >= 'a' && *str <= 'z') {
       10:  128:            ret |= (1 << (*str - 'a'));
        -:  129:        }
       10:  130:        str++;
        -:  131:    }
        2:  132:    return ret;
        -:  133:}
